# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.30.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from fission_client.models.io_fission_v1_environment_spec_builder import IoFissionV1EnvironmentSpecBuilder
from fission_client.models.io_fission_v1_environment_spec_resources import IoFissionV1EnvironmentSpecResources
from fission_client.models.io_fission_v1_environment_spec_runtime import IoFissionV1EnvironmentSpecRuntime
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IoFissionV1EnvironmentSpec(BaseModel):
    """
    EnvironmentSpec contains with builder, runtime and some other related environment settings.
    """ # noqa: E501
    allow_access_to_external_network: Optional[StrictBool] = Field(default=None, description="Istio default blocks all egress traffic for safety. To enable accessibility of external network for builder/function pod, set to 'true'. (Optional) defaults to 'false'", alias="allowAccessToExternalNetwork")
    allowed_functions_per_container: Optional[StrictStr] = Field(default=None, description="(Optional) defaults to 'single'. Fission workflow uses 'infinite' to load multiple functions in one function pod. Available value: - single - infinite", alias="allowedFunctionsPerContainer")
    builder: Optional[IoFissionV1EnvironmentSpecBuilder] = None
    imagepullsecret: Optional[StrictStr] = Field(default=None, description="ImagePullSecret is the secret for Kubernetes to pull an image from a private registry.")
    keeparchive: Optional[StrictBool] = Field(default=None, description="KeepArchive is used by fetcher to determine if the extracted archive or unarchived file should be placed, which is then used by specialize handler. (This is mainly for the JVM environment because .jar is one kind of zip archive.)")
    poolsize: Optional[StrictInt] = Field(default=None, description="The initial pool size for environment")
    resources: Optional[IoFissionV1EnvironmentSpecResources] = None
    runtime: IoFissionV1EnvironmentSpecRuntime
    termination_grace_period: Optional[StrictInt] = Field(default=None, description="The grace time for pod to perform connection draining before termination. The unit is in seconds. (Optional) defaults to 360 seconds", alias="terminationGracePeriod")
    version: StrictInt = Field(description="Version is the Environment API version  Version \"1\" allows user to run code snippet in a file, and it's supported by most of the environments except tensorflow-serving.  Version \"2\" supports downloading and compiling user function if source archive is not empty.  Version \"3\" is almost the same with v2, but you're able to control the size of pre-warm pool of the environment.")
    __properties: ClassVar[List[str]] = ["allowAccessToExternalNetwork", "allowedFunctionsPerContainer", "builder", "imagepullsecret", "keeparchive", "poolsize", "resources", "runtime", "terminationGracePeriod", "version"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IoFissionV1EnvironmentSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of builder
        if self.builder:
            _dict['builder'] = self.builder.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resources
        if self.resources:
            _dict['resources'] = self.resources.to_dict()
        # override the default output from pydantic by calling `to_dict()` of runtime
        if self.runtime:
            _dict['runtime'] = self.runtime.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IoFissionV1EnvironmentSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allowAccessToExternalNetwork": obj.get("allowAccessToExternalNetwork"),
            "allowedFunctionsPerContainer": obj.get("allowedFunctionsPerContainer"),
            "builder": IoFissionV1EnvironmentSpecBuilder.from_dict(obj.get("builder")) if obj.get("builder") is not None else None,
            "imagepullsecret": obj.get("imagepullsecret"),
            "keeparchive": obj.get("keeparchive"),
            "poolsize": obj.get("poolsize"),
            "resources": IoFissionV1EnvironmentSpecResources.from_dict(obj.get("resources")) if obj.get("resources") is not None else None,
            "runtime": IoFissionV1EnvironmentSpecRuntime.from_dict(obj.get("runtime")) if obj.get("runtime") is not None else None,
            "terminationGracePeriod": obj.get("terminationGracePeriod"),
            "version": obj.get("version")
        })
        return _obj


