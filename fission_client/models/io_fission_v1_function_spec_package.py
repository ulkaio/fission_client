# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.30.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from fission_client.models.io_fission_v1_function_spec_package_packageref import IoFissionV1FunctionSpecPackagePackageref
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IoFissionV1FunctionSpecPackage(BaseModel):
    """
    Reference to a package containing deployment and optionally the source.
    """ # noqa: E501
    function_name: Optional[StrictStr] = Field(default=None, description="FunctionName specifies a specific function within the package. This allows functions to share packages, by having different functions within the same package.  Fission itself does not interpret this path. It is passed verbatim to build and runtime environments.  This is optional: if unspecified, the environment has a default name.", alias="functionName")
    packageref: Optional[IoFissionV1FunctionSpecPackagePackageref] = None
    __properties: ClassVar[List[str]] = ["functionName", "packageref"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IoFissionV1FunctionSpecPackage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of packageref
        if self.packageref:
            _dict['packageref'] = self.packageref.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IoFissionV1FunctionSpecPackage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "functionName": obj.get("functionName"),
            "packageref": IoFissionV1FunctionSpecPackagePackageref.from_dict(obj.get("packageref")) if obj.get("packageref") is not None else None
        })
        return _obj


