# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.30.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel
from pydantic import Field
from fission_client.models.io_fission_v1_environment_spec_builder_container_lifecycle_post_start_exec import IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartExec
from fission_client.models.io_fission_v1_environment_spec_builder_container_lifecycle_post_start_http_get import IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartHttpGet
from fission_client.models.io_fission_v1_environment_spec_builder_container_lifecycle_post_start_sleep import IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartSleep
from fission_client.models.io_fission_v1_environment_spec_builder_container_lifecycle_post_start_tcp_socket import IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartTcpSocket
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IoFissionV1EnvironmentSpecBuilderContainerLifecyclePreStop(BaseModel):
    """
    PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
    """ # noqa: E501
    var_exec: Optional[IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartExec] = Field(default=None, alias="exec")
    http_get: Optional[IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartHttpGet] = Field(default=None, alias="httpGet")
    sleep: Optional[IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartSleep] = None
    tcp_socket: Optional[IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartTcpSocket] = Field(default=None, alias="tcpSocket")
    __properties: ClassVar[List[str]] = ["exec", "httpGet", "sleep", "tcpSocket"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IoFissionV1EnvironmentSpecBuilderContainerLifecyclePreStop from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_exec
        if self.var_exec:
            _dict['exec'] = self.var_exec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of http_get
        if self.http_get:
            _dict['httpGet'] = self.http_get.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sleep
        if self.sleep:
            _dict['sleep'] = self.sleep.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tcp_socket
        if self.tcp_socket:
            _dict['tcpSocket'] = self.tcp_socket.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IoFissionV1EnvironmentSpecBuilderContainerLifecyclePreStop from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "exec": IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartExec.from_dict(obj.get("exec")) if obj.get("exec") is not None else None,
            "httpGet": IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartHttpGet.from_dict(obj.get("httpGet")) if obj.get("httpGet") is not None else None,
            "sleep": IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartSleep.from_dict(obj.get("sleep")) if obj.get("sleep") is not None else None,
            "tcpSocket": IoFissionV1EnvironmentSpecBuilderContainerLifecyclePostStartTcpSocket.from_dict(obj.get("tcpSocket")) if obj.get("tcpSocket") is not None else None
        })
        return _obj


