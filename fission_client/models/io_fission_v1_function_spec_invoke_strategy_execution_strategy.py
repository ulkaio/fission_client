# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.30.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from fission_client.models.io_fission_v1_function_spec_invoke_strategy_execution_strategy_hpa_behavior import IoFissionV1FunctionSpecInvokeStrategyExecutionStrategyHpaBehavior
from fission_client.models.io_fission_v1_function_spec_invoke_strategy_execution_strategy_hpa_metrics_inner import IoFissionV1FunctionSpecInvokeStrategyExecutionStrategyHpaMetricsInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IoFissionV1FunctionSpecInvokeStrategyExecutionStrategy(BaseModel):
    """
    ExecutionStrategy specifies low-level parameters for function execution, such as the number of instances.
    """ # noqa: E501
    executor_type: Optional[StrictStr] = Field(default=None, description="ExecutorType is the executor type of function used. Defaults to \"poolmgr\".  Available value:  - poolmgr  - newdeploy  - container", alias="ExecutorType")
    max_scale: Optional[StrictInt] = Field(default=None, description="This is only for newdeploy to set up maximum replicas of deployment.", alias="MaxScale")
    min_scale: Optional[StrictInt] = Field(default=None, description="This is only for newdeploy to set up minimum replicas of deployment.", alias="MinScale")
    specialization_timeout: Optional[StrictInt] = Field(default=None, description="This is the timeout setting for executor to wait for pod specialization.", alias="SpecializationTimeout")
    target_cpu_percent: Optional[StrictInt] = Field(default=None, description="Deprecated: use hpaMetrics instead. This is only for executor type newdeploy and container to set up target CPU utilization of HPA. Applicable for executor type newdeploy and container.", alias="TargetCPUPercent")
    hpa_behavior: Optional[IoFissionV1FunctionSpecInvokeStrategyExecutionStrategyHpaBehavior] = Field(default=None, alias="hpaBehavior")
    hpa_metrics: Optional[List[IoFissionV1FunctionSpecInvokeStrategyExecutionStrategyHpaMetricsInner]] = Field(default=None, description="hpaMetrics is the list of metrics used to determine the desired replica count of the Deployment created for the function. Applicable for executor type newdeploy and container.", alias="hpaMetrics")
    __properties: ClassVar[List[str]] = ["ExecutorType", "MaxScale", "MinScale", "SpecializationTimeout", "TargetCPUPercent", "hpaBehavior", "hpaMetrics"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IoFissionV1FunctionSpecInvokeStrategyExecutionStrategy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of hpa_behavior
        if self.hpa_behavior:
            _dict['hpaBehavior'] = self.hpa_behavior.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in hpa_metrics (list)
        _items = []
        if self.hpa_metrics:
            for _item in self.hpa_metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['hpaMetrics'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IoFissionV1FunctionSpecInvokeStrategyExecutionStrategy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ExecutorType": obj.get("ExecutorType"),
            "MaxScale": obj.get("MaxScale"),
            "MinScale": obj.get("MinScale"),
            "SpecializationTimeout": obj.get("SpecializationTimeout"),
            "TargetCPUPercent": obj.get("TargetCPUPercent"),
            "hpaBehavior": IoFissionV1FunctionSpecInvokeStrategyExecutionStrategyHpaBehavior.from_dict(obj.get("hpaBehavior")) if obj.get("hpaBehavior") is not None else None,
            "hpaMetrics": [IoFissionV1FunctionSpecInvokeStrategyExecutionStrategyHpaMetricsInner.from_dict(_item) for _item in obj.get("hpaMetrics")] if obj.get("hpaMetrics") is not None else None
        })
        return _obj


