# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.30.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from fission_client.models.io_fission_v1_http_trigger_spec_functionref import IoFissionV1HTTPTriggerSpecFunctionref
from fission_client.models.io_fission_v1_http_trigger_spec_ingressconfig import IoFissionV1HTTPTriggerSpecIngressconfig
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IoFissionV1HTTPTriggerSpec(BaseModel):
    """
    HTTPTriggerSpec is for router to expose user functions at the given URL path.
    """ # noqa: E501
    createingress: Optional[StrictBool] = Field(default=None, description="If CreateIngress is true, router will create an ingress definition.")
    functionref: IoFissionV1HTTPTriggerSpecFunctionref
    host: Optional[StrictStr] = Field(default=None, description="Deprecated: the original idea of this field is not for setting Ingress. Since we have IngressConfig now, remove Host after couple releases.")
    ingressconfig: Optional[IoFissionV1HTTPTriggerSpecIngressconfig] = None
    keep_prefix: Optional[StrictBool] = Field(default=None, description="When function is exposed with Prefix based path, keepPrefix decides whether to keep or trim prefix in URL while invoking function.", alias="keepPrefix")
    method: Optional[StrictStr] = Field(default=None, description="Use Methods instead of Method. This field is going to be deprecated in a future release HTTP method to access a function.")
    methods: Optional[List[StrictStr]] = Field(default=None, description="HTTP methods to access a function")
    prefix: Optional[StrictStr] = Field(default=None, description="Prefix with which functions are exposed. NOTE: Prefix takes precedence over URL/RelativeURL. Note that it does not treat slashes specially (\"/foobar/\" will be matched by the prefix \"/foobar\").")
    relativeurl: Optional[StrictStr] = Field(default=None, description="RelativeURL is the exposed URL for external client to access a function with.")
    __properties: ClassVar[List[str]] = ["createingress", "functionref", "host", "ingressconfig", "keepPrefix", "method", "methods", "prefix", "relativeurl"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IoFissionV1HTTPTriggerSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of functionref
        if self.functionref:
            _dict['functionref'] = self.functionref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ingressconfig
        if self.ingressconfig:
            _dict['ingressconfig'] = self.ingressconfig.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IoFissionV1HTTPTriggerSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createingress": obj.get("createingress"),
            "functionref": IoFissionV1HTTPTriggerSpecFunctionref.from_dict(obj.get("functionref")) if obj.get("functionref") is not None else None,
            "host": obj.get("host"),
            "ingressconfig": IoFissionV1HTTPTriggerSpecIngressconfig.from_dict(obj.get("ingressconfig")) if obj.get("ingressconfig") is not None else None,
            "keepPrefix": obj.get("keepPrefix"),
            "method": obj.get("method"),
            "methods": obj.get("methods"),
            "prefix": obj.get("prefix"),
            "relativeurl": obj.get("relativeurl")
        })
        return _obj


