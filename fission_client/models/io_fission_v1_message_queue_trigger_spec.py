# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.30.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictInt, StrictStr
from pydantic import Field
from fission_client.models.io_fission_v1_message_queue_trigger_spec_functionref import IoFissionV1MessageQueueTriggerSpecFunctionref
from fission_client.models.io_fission_v1_message_queue_trigger_spec_podspec import IoFissionV1MessageQueueTriggerSpecPodspec
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class IoFissionV1MessageQueueTriggerSpec(BaseModel):
    """
    MessageQueueTriggerSpec defines a binding from a topic in a message queue to a function.
    """ # noqa: E501
    content_type: Optional[StrictStr] = Field(default=None, description="Content type of payload", alias="contentType")
    cooldown_period: Optional[StrictInt] = Field(default=None, description="The period to wait after the last trigger reported active before scaling the deployment back to 0", alias="cooldownPeriod")
    error_topic: Optional[StrictStr] = Field(default=None, description="Topic to collect error response sent from function", alias="errorTopic")
    functionref: Optional[IoFissionV1MessageQueueTriggerSpecFunctionref] = None
    max_replica_count: Optional[StrictInt] = Field(default=None, description="Maximum number of replicas KEDA will scale the deployment up to", alias="maxReplicaCount")
    max_retries: Optional[StrictInt] = Field(default=None, description="Maximum times for message queue trigger to retry", alias="maxRetries")
    message_queue_type: Optional[StrictStr] = Field(default=None, description="Type of message queue (NATS, Kafka, AzureQueue)", alias="messageQueueType")
    metadata: Optional[Dict[str, StrictStr]] = Field(default=None, description="ScalerTrigger fields")
    min_replica_count: Optional[StrictInt] = Field(default=None, description="Minimum number of replicas KEDA will scale the deployment down to", alias="minReplicaCount")
    mqtkind: Optional[StrictStr] = Field(default=None, description="Kind of Message Queue Trigger to be created, by default its fission")
    podspec: Optional[IoFissionV1MessageQueueTriggerSpecPodspec] = None
    polling_interval: Optional[StrictInt] = Field(default=None, description="The period to check each trigger source on every ScaledObject, and scale the deployment up or down accordingly", alias="pollingInterval")
    resp_topic: Optional[StrictStr] = Field(default=None, description="Topic for message queue trigger to sent response from function.", alias="respTopic")
    secret: Optional[StrictStr] = Field(default=None, description="Secret name")
    topic: StrictStr = Field(description="Subscribed topic")
    __properties: ClassVar[List[str]] = ["contentType", "cooldownPeriod", "errorTopic", "functionref", "maxReplicaCount", "maxRetries", "messageQueueType", "metadata", "minReplicaCount", "mqtkind", "podspec", "pollingInterval", "respTopic", "secret", "topic"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of IoFissionV1MessageQueueTriggerSpec from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of functionref
        if self.functionref:
            _dict['functionref'] = self.functionref.to_dict()
        # override the default output from pydantic by calling `to_dict()` of podspec
        if self.podspec:
            _dict['podspec'] = self.podspec.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of IoFissionV1MessageQueueTriggerSpec from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "contentType": obj.get("contentType"),
            "cooldownPeriod": obj.get("cooldownPeriod"),
            "errorTopic": obj.get("errorTopic"),
            "functionref": IoFissionV1MessageQueueTriggerSpecFunctionref.from_dict(obj.get("functionref")) if obj.get("functionref") is not None else None,
            "maxReplicaCount": obj.get("maxReplicaCount"),
            "maxRetries": obj.get("maxRetries"),
            "messageQueueType": obj.get("messageQueueType"),
            "metadata": obj.get("metadata"),
            "minReplicaCount": obj.get("minReplicaCount"),
            "mqtkind": obj.get("mqtkind"),
            "podspec": IoFissionV1MessageQueueTriggerSpecPodspec.from_dict(obj.get("podspec")) if obj.get("podspec") is not None else None,
            "pollingInterval": obj.get("pollingInterval"),
            "respTopic": obj.get("respTopic"),
            "secret": obj.get("secret"),
            "topic": obj.get("topic")
        })
        return _obj


