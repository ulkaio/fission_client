# coding: utf-8

"""
    Kubernetes

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: v1.30.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest
import datetime

from fission_client.models.io_k8s_apimachinery_pkg_apis_meta_v1_api_group_list import IoK8sApimachineryPkgApisMetaV1APIGroupList

class TestIoK8sApimachineryPkgApisMetaV1APIGroupList(unittest.TestCase):
    """IoK8sApimachineryPkgApisMetaV1APIGroupList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> IoK8sApimachineryPkgApisMetaV1APIGroupList:
        """Test IoK8sApimachineryPkgApisMetaV1APIGroupList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `IoK8sApimachineryPkgApisMetaV1APIGroupList`
        """
        model = IoK8sApimachineryPkgApisMetaV1APIGroupList()
        if include_optional:
            return IoK8sApimachineryPkgApisMetaV1APIGroupList(
                api_version = '',
                groups = [
                    fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/api_group.io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup(
                        api_version = '', 
                        kind = '', 
                        name = '', 
                        preferred_version = fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/group_version_for_discovery.io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery(
                            group_version = '', 
                            version = '', ), 
                        server_address_by_client_cidrs = [
                            fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/server_address_by_client_cidr.io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR(
                                client_cidr = '', 
                                server_address = '', )
                            ], 
                        versions = [
                            fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/group_version_for_discovery.io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery(
                                group_version = '', 
                                version = '', )
                            ], )
                    ],
                kind = ''
            )
        else:
            return IoK8sApimachineryPkgApisMetaV1APIGroupList(
                groups = [
                    fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/api_group.io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup(
                        api_version = '', 
                        kind = '', 
                        name = '', 
                        preferred_version = fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/group_version_for_discovery.io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery(
                            group_version = '', 
                            version = '', ), 
                        server_address_by_client_cidrs = [
                            fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/server_address_by_client_cidr.io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR(
                                client_cidr = '', 
                                server_address = '', )
                            ], 
                        versions = [
                            fission_client.models.io/k8s/apimachinery/pkg/apis/meta/v1/group_version_for_discovery.io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery(
                                group_version = '', 
                                version = '', )
                            ], )
                    ],
        )
        """

    def testIoK8sApimachineryPkgApisMetaV1APIGroupList(self):
        """Test IoK8sApimachineryPkgApisMetaV1APIGroupList"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
